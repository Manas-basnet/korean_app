import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'package:korean_language_app/features/books/presentation/bloc/book_session/book_session_cubit.dart';
import 'package:korean_language_app/shared/presentation/language_preference/bloc/language_preference_cubit.dart';
import 'package:korean_language_app/features/tests/presentation/widgets/custom_cached_image.dart';

class HomepageReadingSection extends StatefulWidget {
  const HomepageReadingSection({super.key});

  @override
  State<HomepageReadingSection> createState() => _HomepageReadingSectionState();
}

class _HomepageReadingSectionState extends State<HomepageReadingSection> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<BookSessionCubit>().loadReadingData();
    });
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<BookSessionCubit, BookSessionState>(
      builder: (context, state) {
        if (state is BookSessionLoaded) {
          return Column(
            children: [
              if (state.lastReadBook != null) 
                _buildContinueReadingSection(state.lastReadBook!),
              
              if (state.recentBooks.isNotEmpty)
                _buildRecentBooksSection(state.recentBooks),
              
              _buildReadingStatsSection(state),
            ],
          );
        }
        return const SizedBox.shrink();
      },
    );
  }

  Widget _buildContinueReadingSection(BookReadingProgress progress) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final languageCubit = context.read<LanguagePreferenceCubit>();

    if (progress.isCompleted) {
      return const SizedBox.shrink();
    }

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            languageCubit.getLocalizedText(
              korean: '읽기 계속하기',
              english: 'Continue Reading',
            ),
            style: theme.textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.w700,
              color: colorScheme.onSurface,
            ),
          ),
          const SizedBox(height: 12),
          Card(
            elevation: 3,
            shadowColor: colorScheme.shadow.withValues(alpha: 0.2),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
              side: BorderSide(
                color: colorScheme.primary.withValues(alpha: 0.3),
                width: 1,
              ),
            ),
            child: InkWell(
              onTap: () => _continueReading(progress),
              borderRadius: BorderRadius.circular(20),
              child: Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      colorScheme.primaryContainer.withValues(alpha: 0.4),
                      colorScheme.primaryContainer.withValues(alpha: 0.1),
                    ],
                  ),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  children: [
                    if (progress.bookImageUrl != null || progress.bookImagePath != null)
                      Container(
                        width: 60,
                        height: 90,
                        margin: const EdgeInsets.only(right: 16),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: CustomCachedImage(
                            imageUrl: progress.bookImageUrl,
                            imagePath: progress.bookImagePath,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                decoration: BoxDecoration(
                                  color: colorScheme.primary,
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: Icon(
                                  Icons.play_arrow_rounded,
                                  color: colorScheme.onPrimary,
                                  size: 16,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Text(
                                languageCubit.getLocalizedText(
                                  korean: '계속 읽기',
                                  english: 'Continue',
                                ),
                                style: theme.textTheme.labelLarge?.copyWith(
                                  color: colorScheme.primary,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          Text(
                            progress.bookTitle,
                            style: theme.textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.w600,
                              color: colorScheme.onSurface,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const SizedBox(height: 4),
                          Text(
                            progress.currentChapterTitle,
                            style: theme.textTheme.bodyMedium?.copyWith(
                              color: colorScheme.onSurfaceVariant,
                            ),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const SizedBox(height: 12),
                          Row(
                            children: [
                              Expanded(
                                child: LinearProgressIndicator(
                                  value: progress.overallProgress,
                                  backgroundColor: colorScheme.outline.withValues(alpha: 0.2),
                                  valueColor: AlwaysStoppedAnimation<Color>(colorScheme.primary),
                                  minHeight: 6,
                                  borderRadius: BorderRadius.circular(3),
                                ),
                              ),
                              const SizedBox(width: 12),
                              Text(
                                progress.formattedProgress,
                                style: theme.textTheme.bodySmall?.copyWith(
                                  color: colorScheme.primary,
                                  fontWeight: FontWeight.w700,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          Row(
                            children: [
                              Icon(
                                Icons.access_time_rounded,
                                size: 16,
                                color: colorScheme.onSurfaceVariant,
                              ),
                              const SizedBox(width: 4),
                              Text(
                                progress.formattedReadingTime,
                                style: theme.textTheme.bodySmall?.copyWith(
                                  color: colorScheme.onSurfaceVariant,
                                ),
                              ),
                              const SizedBox(width: 16),
                              Icon(
                                Icons.schedule_rounded,
                                size: 16,
                                color: colorScheme.onSurfaceVariant,
                              ),
                              const SizedBox(width: 4),
                              Text(
                                _formatLastReadTime(progress.lastReadAt, languageCubit),
                                style: theme.textTheme.bodySmall?.copyWith(
                                  color: colorScheme.onSurfaceVariant,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecentBooksSection(List<BookReadingProgress> recentBooks) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final languageCubit = context.read<LanguagePreferenceCubit>();

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  languageCubit.getLocalizedText(
                    korean: '최근 읽은 도서',
                    english: 'Recently Read',
                  ),
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: colorScheme.onSurface,
                  ),
                ),
                TextButton(
                  onPressed: () => context.push('/reading-history'),
                  child: Text(
                    languageCubit.getLocalizedText(
                      korean: '더보기',
                      english: 'See All',
                    ),
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: 200,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              itemCount: recentBooks.take(5).length,
              itemBuilder: (context, index) {
                final progress = recentBooks[index];
                return _buildRecentBookCard(progress);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecentBookCard(BookReadingProgress progress) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Container(
      width: 120,
      margin: const EdgeInsets.only(right: 12, left: 4),
      child: Card(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        child: InkWell(
          onTap: () => _continueReading(progress),
          borderRadius: BorderRadius.circular(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Expanded(
                flex: 3,
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                    color: colorScheme.surfaceContainerHighest,
                  ),
                  child: ClipRRect(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                    child: progress.bookImageUrl != null || progress.bookImagePath != null
                        ? CustomCachedImage(
                            imageUrl: progress.bookImageUrl,
                            imagePath: progress.bookImagePath,
                            fit: BoxFit.cover,
                          )
                        : Icon(
                            Icons.library_books_rounded,
                            size: 40,
                            color: colorScheme.onSurfaceVariant,
                          ),
                  ),
                ),
              ),
              Expanded(
                flex: 2,
                child: Padding(
                  padding: const EdgeInsets.all(8),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        progress.bookTitle,
                        style: theme.textTheme.bodySmall?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: colorScheme.onSurface,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 4),
                      LinearProgressIndicator(
                        value: progress.overallProgress,
                        backgroundColor: colorScheme.outline.withValues(alpha: 0.2),
                        valueColor: AlwaysStoppedAnimation<Color>(
                          progress.isCompleted ? Colors.green : colorScheme.primary,
                        ),
                        minHeight: 3,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        progress.formattedProgress,
                        style: theme.textTheme.labelSmall?.copyWith(
                          color: progress.isCompleted ? Colors.green : colorScheme.primary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildReadingStatsSection(BookSessionLoaded state) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final languageCubit = context.read<LanguagePreferenceCubit>();

    final inProgressBooks = state.allProgress.values
        .where((p) => p.overallProgress > 0 && p.overallProgress < 1.0)
        .length;
    
    final completedBooks = state.allProgress.values
        .where((p) => p.isCompleted)
        .length;

    final totalReadingTime = state.allProgress.values
        .fold<Duration>(Duration.zero, (sum, progress) => sum + progress.totalReadingTime);

    return Container(
      margin: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            languageCubit.getLocalizedText(
              korean: '읽기 통계',
              english: 'Reading Stats',
            ),
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.w600,
              color: colorScheme.onSurface,
            ),
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: _buildStatCard(
                  icon: Icons.auto_stories_rounded,
                  title: languageCubit.getLocalizedText(
                    korean: '읽는 중',
                    english: 'Reading',
                  ),
                  value: inProgressBooks.toString(),
                  color: colorScheme.primary,
                  theme: theme,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard(
                  icon: Icons.check_circle_rounded,
                  title: languageCubit.getLocalizedText(
                    korean: '완료',
                    english: 'Completed',
                  ),
                  value: completedBooks.toString(),
                  color: Colors.green,
                  theme: theme,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildStatCard(
                  icon: Icons.access_time_rounded,
                  title: languageCubit.getLocalizedText(
                    korean: '총 시간',
                    english: 'Total Time',
                  ),
                  value: _formatTotalTime(totalReadingTime),
                  color: colorScheme.tertiary,
                  theme: theme,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard({
    required IconData icon,
    required String title,
    required String value,
    required Color color,
    required ThemeData theme,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: color.withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: theme.textTheme.titleLarge?.copyWith(
              color: color,
              fontWeight: FontWeight.w700,
            ),
          ),
          Text(
            title,
            style: theme.textTheme.bodySmall?.copyWith(
              color: color,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  void _continueReading(BookReadingProgress progress) {
    context.push('/book-chapters/${progress.bookId}');
  }

  String _formatLastReadTime(DateTime lastRead, LanguagePreferenceCubit languageCubit) {
    final now = DateTime.now();
    final difference = now.difference(lastRead);

    if (difference.inDays > 0) {
      return languageCubit.getLocalizedText(
        korean: '${difference.inDays}일 전',
        english: '${difference.inDays}d ago',
      );
    } else if (difference.inHours > 0) {
      return languageCubit.getLocalizedText(
        korean: '${difference.inHours}시간 전',
        english: '${difference.inHours}h ago',
      );
    } else {
      return languageCubit.getLocalizedText(
        korean: '방금 전',
        english: 'Just now',
      );
    }
  }

  String _formatTotalTime(Duration totalTime) {
    final hours = totalTime.inHours;
    if (hours > 0) {
      return '${hours}h';
    } else {
      return '${totalTime.inMinutes}m';
    }
  }
}